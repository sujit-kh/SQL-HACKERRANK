### REVISING THE SELECT QUERY I
Query all columns for all American cities in the CITY table with populations larger than 100000. The CountryCode for America is USA.
The CITY table is described as follows:

--->>select * from CITY WHERE COUNTRYCODE='USA' AND POPULATION>100000;
------------------------------------------------------------------------------------
### REVISING THE SELECT QUERY II
Query the NAME field for all American cities in the CITY table with populations larger than 120000. The CountryCode for America is USA.

--->>select NAME from CITY WHERE COUNTRYCODE='USA' AND POPULATION>120000;
------------------------------------------------------------------------------------
### SELECT ALL
Query all columns (attributes) for every row in the CITY table.

--->>SELECT * FROM CITY;
-------------------------------------------------------------------------------------
### SELECT BY ID
Query all columns for a city in CITY with the ID 1661.

--->>SELECT * FROM CITY WHERE ID=1661;
-------------------------------------------------------------------------------------
### Japanese Cities Attributes
Query all attributes of every Japanese city in the CITY table. The COUNTRYCODE for Japan is JPN.

--->>SELECT * FROM CITY WHERE COUNTRYCODE='JPN';
-------------------------------------------------------------------------------------
### Japanse Cities Names
Query the names of all the Japanese cities in the CITY table. The COUNTRYCODE for Japan is JPN.

--->>select NAME from CITY WHERE COUNTRYCODE='JPN';
--------------------------------------------------------------------------------------
### Wheather Observation Station 1
Query a list of CITY and STATE from the STATION table.The STATION table is described as follows:

--->>select CITY,STATE FROM STATION ;
--------------------------------------------------------------------------------------
### Wheather Observation Station 3
Query a list of CITY names from STATION for cities that have an even ID number. Print the results in any order, but exclude duplicates from the answer.

--->>select DISTINCT CITY from Station where MOD(ID,2)=0 ORDER BY CITY ASC;
--------------------------------------------------------------------------------------
### Wheather Observation Station 4
Find the difference between the total number of CITY entries in the table and the number of distinct CITY entries in the table.

--->>SELECT COUNT(CITY) - COUNT(DISTINCT CITY) FROM STATION;
--------------------------------------------------------------------------------------
### Weather Observation Station 5
Query the two cities in STATION with the shortest and longest CITY names, as well as their respective lengths (i.e.: number of characters in the name).
If there is more than one smallest or largest city, choose the one that comes first when ordered alphabetically.

--->>select CITY,LENGTH(CITY) FROM STATION ORDER BY LENGTH(CITY)ASC,CITY ASC LIMIT 1;
select CITY,LENGTH(CITY) FROM STATION ORDER BY LENGTH(CITY)DESC,CITY DESC LIMIT 1;
--------------------------------------------------------------------------------------
### Weather Observation Station 6
Query the list of CITY names starting with vowels (i.e., a, e, i, o, or u) from STATION. Your result cannot contain duplicates.

--->>SELECT distinct CITY FROM STATION WHERE CITY LIKE 'a%' OR CITY LIKE 'e%' OR CITY LIKE 'i%' OR CITY LIKE 'o%' OR CITY LIKE 'u%';
--->>select distinct CITY FROM STATION WHERE RIGHT(CITY,1) IN('a','e','i','o','u');
--->>select distinct CITY FROM STATION WHERE CITY '%[aeiou]';
---------------------------------------------------------------------------------------
### Weather Observation Station 7
Query the list of CITY names ending with vowels (a, e, i, o, u) from STATION. Your result cannot contain duplicates.

--->>select distinct(CITY) FROM STATION WHERE CITY REGEXP '[aeiou]$';
--->>SELECT DISTINCT CITY FROM STATION WHERE CITY LIKE '%a' or CITY LIKE '%e' or CITY LIKE '%i' or CITY LIKE '%o' or CITY LIKE '%u';
---------------------------------------------------------------------------------------
### Weather Observation Station 8
Query the list of CITY names from STATION which have vowels (i.e., a, e, i, o, and u) as both their first and last characters. Your result cannot 
contain duplicates.

--->>select distinct CITY from STATION where CITY RLIKE '^[aeiou].*[aeiou]$';
---------------------------------------------------------------------------------------
### Weather Observation Station 9
Query the list of CITY names from STATION that do not start with vowels. Your result cannot contain duplicates.

--->>select distinct CITY FROM STATION WHERE CITY NOT RLIKE '^[AEIOUaeiou]';
---------------------------------------------------------------------------------------
### Weather Observation Station 10
Query the list of CITY names from STATION that do not end with vowels. Your result cannot contain duplicates.

--->>select DISTINCT CITY from STATION WHERE CITY NOT RLIKE '[aeiou]$'; 
---------------------------------------------------------------------------------------
### Weather Observation Station 11
Query the list of CITY names from STATION that either do not start with vowels or do not end with vowels. Your result cannot contain duplicates

--->>SELECT DISTINCT CITY FROM STATION WHERE CITY NOT RLIKE '^[AEIOUaeiou].*[AEIOUaeiou]$';
--->>SELECT DISTINCT CITY FROM STATION WHERE lower(SUBSTR(CITY,1,1)) NOT IN ('a','e','i','o','u') OR LOWER(SUBSTR(CITY,LENGTH(CITY),1)) 
NOT IN ('a','e','i','o','u');
----------------------------------------------------------------------------------------
### Weather Observation Station 12
Query the list of CITY names from STATION that do not start with vowels and do not end with vowels. Your result cannot contain duplicates.

--->>select distinct CITY FROM STATION WHERE LOWER(SUBSTR(CITY,1,1)) NOT IN ('a','e','i','o','u') AND LOWER(SUBSTR(CITY,LENGTH(CITY),1)) NOT IN 
('a','e','i','o','u');
--->>SELECT DISTINCT CITY FROM STATION WHERE CITY NOT RLIKE '^[AEIOUaeiou]'AND CITY NOT RLIKE'[AEIOUaeiou]$';
-----------------------------------------------------------------------------------------
### Higher than 75 ranks
Query the Name of any student in STUDENTS who scored higher than 75 Marks. Order your output by the last three characters of each name. If two or more 
students both have names ending in the same last three characters (i.e.: Bobby, Robby, etc.), secondary sort them by ascending ID.

--->>select Name from STUDENTS WHERE Marks > 75 ORDER BY SUBSTR(Name,LENGTH(Name)-2,3),ID;
--->>select Name from STUDENTS WHERE Marks > 75 ORDER BY RIGHT(Name,3),ID;
--------------------------------------------------------------------------------------------
### Employee names
Write a query that prints a list of employee names (i.e.: the name attribute) from the Employee table in alphabetical order.

--->>select name from employee order by name;
--------------------------------------------------------------------------------------------
### employees salary
Write a query that prints a list of employee names (i.e.: the name attribute) for employees in Employee having a salary greater than  per month who have 
been employees for less than  months. Sort your result by ascending employee_id.

--->>select name from employee where salary>2000 and months<10 order by employee_id;
--------------------------------------------------------------------------------------------
### Population Census
Given the CITY and COUNTRY tables, query the sum of the populations of all cities where the CONTINENT is 'Asia'.
Note: CITY.CountryCode and COUNTRY.Code are matching key columns.

--->>select SUM(CITY.POPULATION) FROM COUNTRY INNER JOIN CITY ON COUNTRY.CODE = CITY.COUNTRYCODE WHERE COUNTRY.CONTINENT='Asia';
--->>select SUM(CITY.POPULATION) FROM CITY WHERE CITY.COUNTRYCODE IN (SELECT CODE FROM COUNTRY WHERE CONTINENT='Asia');
---------------------------------------------------------------------------------------------
### African cities
Given the CITY and COUNTRY tables, query the names of all cities where the CONTINENT is 'Africa'.
Note: CITY.CountryCode and COUNTRY.Code are matching key columns.

--->>select name from CITY WHERE CITY.COUNTRYCODE IN (SELECT CODE FROM COUNTRY WHERE CONTINENT='Africa');
----------------------------------------------------------------------------------------------
### 
Given the CITY and COUNTRY tables, query the names of all the continents (COUNTRY.Continent) and their respective average city populations 
(CITY.Population) rounded down to the nearest integer. Note: CITY.CountryCode and COUNTRY.Code are matching key columns.

--->>select COUNTRY.CONTINENT,FLOOR(AVG(CITY.POPULATION))FROM CITY,COUNTRY WHERE CITY.COUNTRYCODE = COUNTRY.CODE GROUP BY COUNTRY.CONTINENT;
































